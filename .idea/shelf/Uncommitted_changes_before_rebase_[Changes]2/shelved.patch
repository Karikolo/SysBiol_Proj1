Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># main.py\n\nimport os\nimport shutil\nimport numpy as np\nimport config\nfrom environment import Environment\nfrom population import Population\nfrom mutation import mutate_population\nfrom selection import proportional_selection, threshold_selection\nfrom reproduction import asexual_reproduction\nfrom visualization import plot_population\n\ndef main():\n    env = Environment(alpha_init=config.alpha0, c=config.c, delta=config.delta)\n    pop = Population(size=config.N, n_dim=config.n)\n    finish_gif = False # zmienna służąca do zapisania w gifie momentu wymarcia populacji\n\n    # Katalog, w którym zapisujemy obrazki (możesz nazwać np. \"frames/\")\n    frames_dir = \"frames\"\n    shutil.rmtree(frames_dir) # upewnia się, że frames z poprzedniej symulacji nie wejdą do nowego gifa\n    os.makedirs(frames_dir, exist_ok=True)  # tworzy folder\n\n    for generation in range(config.max_generations):\n        # 1. Mutacja\n        mutate_population(pop, mu=config.mu, mu_c=config.mu_c, xi=config.xi)\n\n        # 2. Selekcja\n        survivors = threshold_selection(pop, env.get_optimal_phenotype(), config.sigma, config.threshold_surv)\n        pop.set_individuals(survivors) # what does this mean?\n\n        if len(survivors) > 0:\n            proportional_selection(pop, env.get_optimal_phenotype(), config.sigma, config.N)\n        else:\n            print(f\"Wszyscy wymarli w pokoleniu {generation}. Kończę symulację.\")\n            finish_gif = True\n\n        # 3. Reprodukcja \n        # TODO: check if config.sigma applies here as well\n        # Dobieranie w pary (ten, kto się nie dobierze, ten się nie rozmnaża)\n        asexuals = threshold_selection(pop, env.get_optimal_phenotype(), config.sigma, config.threshold_asex)\n        paired = [s for s in survivors if s not in asexuals] # lista osobników, które w tej generacji rozmnażają się płciowo\n        '''\n        population.pair(), lub w reprodukcji\n        odgórnie osobniki dobierane w pary, zapamiętują z kim są w parze lub gdy w ogóle się nie rozmnażają\n        reproduction robi update populacji: nie rozmnażające się pozostają, aseksualne się klonują, \n        płciowe samice i jej dzieci wchodzą do populacji, samce umierają? (na początku wszyscy przeżywają)\n        '''\n\n        # 4. Zmiana środowiska\n        # TODO: add nurture, environmental adaptation (ensure the asexual individuals aren't stacked in one dot)\n        env.update()\n\n        # Zapis aktualnego stanu populacji do pliku PNG\n        frame_filename = os.path.join(frames_dir, f\"frame_{generation:03d}.png\")\n        plot_population(pop, env.get_optimal_phenotype(), generation, save_path=frame_filename, show_plot=False)\n        \n        if finish_gif: break\n\n    print(\"Symulacja zakończona. Tworzenie GIF-a...\")\n\n    # Tutaj wywołujemy funkcję, która połączy zapisane klatki w animację\n    create_gif_from_frames(frames_dir, \"simulation.gif\")\n    print(\"GIF zapisany jako simulation.gif\")\n\ndef create_gif_from_frames(frames_dir, gif_filename, duration=0.5):\n    \"\"\"\n    Łączy wszystkie obrazki z katalogu `frames_dir` w jeden plik GIF.\n    Wymaga biblioteki imageio (pip install imageio).\n    :param frames_dir: folder z plikami .png\n    :param gif_filename: nazwa pliku wyjściowego GIF\n    :param duration: czas wyświetlania jednej klatki w sekundach\n    \"\"\"\n    import imageio\n    import os\n\n    # Sortujemy pliki po nazwach, żeby zachować kolejność generacji\n    filenames = sorted([f for f in os.listdir(frames_dir) if f.endswith(\".png\")])\n    \n    with imageio.get_writer(gif_filename, mode='I', duration=duration) as writer:\n        for file_name in filenames:\n            path = os.path.join(frames_dir, file_name)\n            image = imageio.imread(path)\n            writer.append_data(image)\n\n\nif __name__ == \"__main__\":\n    main()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision aad14a0f58d86ac7888990183f05c8c9da24c48c)
+++ b/main.py	(date 1742551229011)
@@ -18,7 +18,7 @@
 
     # Katalog, w którym zapisujemy obrazki (możesz nazwać np. "frames/")
     frames_dir = "frames"
-    shutil.rmtree(frames_dir) # upewnia się, że frames z poprzedniej symulacji nie wejdą do nowego gifa
+    if os.path.exists(frames_dir): shutil.rmtree(frames_dir) # upewnia się, że frames z poprzedniej symulacji nie wejdą do nowego gifa
     os.makedirs(frames_dir, exist_ok=True)  # tworzy folder
 
     for generation in range(config.max_generations):
